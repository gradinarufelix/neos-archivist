PunktDe:
  Archivist:
    sortingInstructions:

      # Simple Example
      #
      # Configuration for the nodeType 'PunktDe.Archivist.TriggerNode'. The sorting is triggered if a
      # node of this type is created or if a property on this node is changed. This node is than
      # available as 'node' in the other parts of the configuration
      'PunktDe.Archivist.TriggerNode':

        # The query selecting the root node of the automatically created hierarchy
        hierarchyRoot: "${q(site).find('[instanceof Neos.ContentRepository.Testing:Page]').get(0)}"

        # Optional: The sorting of the nodes inside the target hierarchy. Can be the name of a property
        # or an eel expression like seen below
        sorting: title

        # Optional: Trigger sorting only, when condition is met. Can be used to make sure that required properties are set as expected.
        condition: "${node.properties.date != null}"

        # Automatically publish the created document hierarchy
        publishHierarchy: true

        # In the context is evaluated first. You can define variables here which you can use in
        # the remaining configuration
        context:
          publishDate: "${node.properties.date}"

        # Definition of the auto-generated hierarchy
        hierarchy:
          -
            # The type of the hierarchy-node
            type: 'PunktDe.Archivist.HierarchyNode'

            # Properties of the new created node.
            properties:
              name: "${Date.year(publishDate)}"
              title: "${Date.year(publishDate)}"

            # The property which is identical throughout all nodes of this level
            identity: title

            # An eel query that describes the sorting condition
            sorting: "${q(a).property('title') < q(b).property('title')}"
          -
            type: 'PunktDe.Archivist.HierarchyNode'
            properties:
              name: "${Date.month(publishDate)}"
              title: "${Date.month(publishDate)}"
            identity: title

            # Simple sorting on a property
            sorting: title

      # Minimal Configuration Example
      #
      'PunktDe.Archivist.MinimalConfiguredTriggerNode':
        hierarchyRoot: "${q(site).find('[instanceof Neos.ContentRepository.Testing:Page]').get(0)}"
        hierarchy:
          -
            type: 'PunktDe.Archivist.HierarchyNode'
            properties:
              title: "${Archivist.buildSortingCharacter(node.properties.title)}"
            identity: title
            sorting: "${q(a).property('title') < q(b).property('title')}"

      # Example triggering content node
      #
      # A content node triggers the move of its parent document node. For example, you have a
      # title node which should be considered to move the page.
      'PunktDe.Archivist.TriggerContentNode':

        condition: "${node.properties.title != null}"

        # The query selecting the root node of the automatically created hierarchy
        hierarchyRoot: "${q(site).find('[instanceof Neos.ContentRepository.Testing:Page]').get(0)}"

        # Optional: The node to be moved, described by an Eel query.
        # This defaults to the triggering node if not set. The triggering node is available as "node".
        # If the affected node is not found by the operation is skipped.
        # This can for example be used if a change in a content node should move its parent document node
        #
        affectedNode: "${q(node).parent('[instanceof Neos.ContentRepository.Testing:Document]').get(0)}"

        # Definition of the auto-generated hierarchy
        hierarchy:
          -
            # The type of the hierarchy-node
            type: 'PunktDe.Archivist.HierarchyNode'

            # Properties of the new created node.
            properties:
              name: "${Archivist.buildSortingCharacter(node.properties.title)}"
              title: "${Archivist.buildSortingCharacter(node.properties.title)}"

      # Example sorting content nodes into document nodes
      #
      # A content node triggers the move of its parent document node. For example, you have a
      # title node which should be considered to move the page.
      'PunktDe.Archivist.TriggerContentNodeToBeSortedInDocument':

        # The query selecting the root node of the automatically created hierarchy
        hierarchyRoot: "${q(site).find('[instanceof Neos.ContentRepository.Testing:Page]').get(0)}"

        # Definition of the auto-generated hierarchy
        hierarchy:
          -
            type: 'PunktDe.Archivist.HierarchyNode'
            properties:
              name: "${Archivist.buildSortingCharacter(node.properties.title)}"
              title: "${Archivist.buildSortingCharacter(node.properties.title)}"
          -
            type: 'Neos.Neos:ContentCollection'
            properties:
              name: 'main'
            identity: name
